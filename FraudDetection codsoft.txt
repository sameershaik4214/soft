{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":1399887,"sourceType":"datasetVersion","datasetId":817870}],"dockerImageVersionId":30626,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false},"colab":{"name":"Credit_Card_Fraud_Detection","provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/credit-card-fraud-detection-2ed1dd51-22b4-4eaf-ada7-e1091617888e.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20240221/auto/storage/goog4_request&X-Goog-Date=20240221T173924Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=2a978bf0bafb0f2540b799232907ed93b770a90bfe74e09dc76ff514cfbcddc204fb8932c89bba5e95bec9083b6c0f040cba67bfae98ac3f02a87a6f5ad94e04386dcc2826ac9f29ed9742e43dd7f9fcd3e3bb87686e3e35d7ebd86471053752644dcd1641b780d6fecd68101129a8c8f2a293265a437301a8ebb90e0f7d0322c0632f2f18026b21eee9abe6686dc1d91ea1a4c55e96e54424d0b47c279b5e8975ed0be2ed896d845ceb2f8415dd47a507a21f633d5d61673dcd11bf2e192594ae4bd9ea579c9fddff673aea801b9f4bdf92d2dc02a914e0ea2ba7139d2521e0df706b8c3e486539c72727dc7dbe3b155eebb7e1e9de1b793171655be9ecaabb","timestamp":1708537406236}]}},"nbformat_minor":0,"nbformat":4,"cells":[{"source":["\n","# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES\n","# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,\n","# THEN FEEL FREE TO DELETE THIS CELL.\n","# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n","# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n","# NOTEBOOK.\n","import os\n","import sys\n","from tempfile import NamedTemporaryFile\n","from urllib.request import urlopen\n","from urllib.parse import unquote, urlparse\n","from urllib.error import HTTPError\n","from zipfile import ZipFile\n","import tarfile\n","import shutil\n","\n","CHUNK_SIZE = 40960\n","DATA_SOURCE_MAPPING = 'fraud-detection:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F817870%2F1399887%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240221%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240221T173923Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D9b84ada304ca43ea3d2f63d4da234e83be562371505ad29a4b1f2a6ec5e94fdf0efefb6c4b114f95045b38d1eb194a762f1c53d680d2ea228df543e5f9cbd729f01fac573bc9ec854d4ffb73ca72590fd81aad24947cd61c122527d5702c8033fed1032bde264c5ab95fe11972db2f4efdad4fe224b0eb25d186e22d861e4da32968356eba024302f807e3d19e7e7e108df894d6334e3a0e079b740380ef59f2449d4db7399c5bb6e7d30210f05e2606810df84b6e818af3cf8d4a716cd74778814c6c25c6261b271039205fa3a01b0c179eb5d7e4d6144eacc433fcbba54ab7c23b5102eb0563c1f4441cec7230e1e3233fd7128b0829a815692c6575efeb2f'\n","\n","KAGGLE_INPUT_PATH='/kaggle/input'\n","KAGGLE_WORKING_PATH='/kaggle/working'\n","KAGGLE_SYMLINK='kaggle'\n","\n","!umount /kaggle/input/ 2> /dev/null\n","shutil.rmtree('/kaggle/input', ignore_errors=True)\n","os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)\n","os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)\n","\n","try:\n","  os.symlink(KAGGLE_INPUT_PATH, os.path.join(\"..\", 'input'), target_is_directory=True)\n","except FileExistsError:\n","  pass\n","try:\n","  os.symlink(KAGGLE_WORKING_PATH, os.path.join(\"..\", 'working'), target_is_directory=True)\n","except FileExistsError:\n","  pass\n","\n","for data_source_mapping in DATA_SOURCE_MAPPING.split(','):\n","    directory, download_url_encoded = data_source_mapping.split(':')\n","    download_url = unquote(download_url_encoded)\n","    filename = urlparse(download_url).path\n","    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)\n","    try:\n","        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:\n","            total_length = fileres.headers['content-length']\n","            print(f'Downloading {directory}, {total_length} bytes compressed')\n","            dl = 0\n","            data = fileres.read(CHUNK_SIZE)\n","            while len(data) > 0:\n","                dl += len(data)\n","                tfile.write(data)\n","                done = int(50 * dl / int(total_length))\n","                sys.stdout.write(f\"\\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded\")\n","                sys.stdout.flush()\n","                data = fileres.read(CHUNK_SIZE)\n","            if filename.endswith('.zip'):\n","              with ZipFile(tfile) as zfile:\n","                zfile.extractall(destination_path)\n","            else:\n","              with tarfile.open(tfile.name) as tarfile:\n","                tarfile.extractall(destination_path)\n","            print(f'\\nDownloaded and uncompressed: {directory}')\n","    except HTTPError as e:\n","        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')\n","        continue\n","    except OSError as e:\n","        print(f'Failed to load {download_url} to path {destination_path}')\n","        continue\n","\n","print('Data source import complete.')\n"],"metadata":{"id":"XT4b2jKQwGIt","executionInfo":{"status":"ok","timestamp":1708537313541,"user_tz":-330,"elapsed":21739,"user":{"displayName":"","userId":""}},"outputId":"c910d1c7-5abc-4ef4-9fec-ab36ac37ee41","colab":{"base_uri":"https://localhost:8080/"}},"cell_type":"code","outputs":[{"output_type":"stream","name":"stdout","text":["Downloading fraud-detection, 211766662 bytes compressed\n","[==================================================] 211766662 bytes downloaded\n","Downloaded and uncompressed: fraud-detection\n","Data source import complete.\n"]}],"execution_count":1},{"cell_type":"code","source":["# This Python 3 environment comes with many helpful analytics libraries installed\n","# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n","# For example, here's several helpful packages to load\n","\n","import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","\n","# Input data files are available in the read-only \"../input/\" directory\n","# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","\n","import os\n","for dirname, _, filenames in os.walk('/kaggle/input'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))\n","\n","# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\"\n","# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"],"metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-01-05T13:23:38.942141Z","iopub.execute_input":"2024-01-05T13:23:38.942929Z","iopub.status.idle":"2024-01-05T13:23:39.427212Z","shell.execute_reply.started":"2024-01-05T13:23:38.942881Z","shell.execute_reply":"2024-01-05T13:23:39.426038Z"},"trusted":true,"id":"kKkhywcawGIw","executionInfo":{"status":"ok","timestamp":1708537322152,"user_tz":-330,"elapsed":1614,"user":{"displayName":"","userId":""}},"outputId":"caf3da75-7a6d-4cec-e04e-bee7dee9ea86","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["/kaggle/input/fraud-detection/fraudTrain.csv\n","/kaggle/input/fraud-detection/fraudTest.csv\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score,confusion_matrix\n","from sklearn.linear_model import LogisticRegression\n","import seaborn as sns\n","import matplotlib.pyplot as plt"],"metadata":{"execution":{"iopub.status.busy":"2024-01-05T13:46:48.963583Z","iopub.execute_input":"2024-01-05T13:46:48.96413Z","iopub.status.idle":"2024-01-05T13:46:49.3365Z","shell.execute_reply.started":"2024-01-05T13:46:48.964063Z","shell.execute_reply":"2024-01-05T13:46:49.335009Z"},"trusted":true,"id":"I0XU6e6dwGIy","executionInfo":{"status":"ok","timestamp":1708537329052,"user_tz":-330,"elapsed":3111,"user":{"displayName":"","userId":""}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["## Feature Engineering"],"metadata":{"id":"6AXrgCT9wGIy"}},{"cell_type":"code","source":["df=pd.read_csv('/kaggle/input/fraud-detection/fraudTrain.csv')\n","df.head()"],"metadata":{"execution":{"iopub.status.busy":"2024-01-05T13:25:33.177853Z","iopub.execute_input":"2024-01-05T13:25:33.178321Z","iopub.status.idle":"2024-01-05T13:25:48.672111Z","shell.execute_reply.started":"2024-01-05T13:25:33.178288Z","shell.execute_reply":"2024-01-05T13:25:48.670384Z"},"trusted":true,"id":"OQALGRr8wGI0","executionInfo":{"status":"ok","timestamp":1708537348347,"user_tz":-330,"elapsed":14906,"user":{"displayName":"","userId":""}},"outputId":"c37a5b1f-5a98-4be6-b2b7-c64c4bb6f4cb","colab":{"base_uri":"https://localhost:8080/","height":550}},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0 trans_date_trans_time            cc_num  \\\n","0           0   2019-01-01 00:00:18  2703186189652095   \n","1           1   2019-01-01 00:00:44      630423337322   \n","2           2   2019-01-01 00:00:51    38859492057661   \n","3           3   2019-01-01 00:01:16  3534093764340240   \n","4           4   2019-01-01 00:03:06   375534208663984   \n","\n","                             merchant       category     amt      first  \\\n","0          fraud_Rippin, Kub and Mann       misc_net    4.97   Jennifer   \n","1     fraud_Heller, Gutmann and Zieme    grocery_pos  107.23  Stephanie   \n","2                fraud_Lind-Buckridge  entertainment  220.11     Edward   \n","3  fraud_Kutch, Hermiston and Farrell  gas_transport   45.00     Jeremy   \n","4                 fraud_Keeling-Crist       misc_pos   41.96      Tyler   \n","\n","      last gender                        street  ...      lat      long  \\\n","0    Banks      F                561 Perry Cove  ...  36.0788  -81.1781   \n","1     Gill      F  43039 Riley Greens Suite 393  ...  48.8878 -118.2105   \n","2  Sanchez      M      594 White Dale Suite 530  ...  42.1808 -112.2620   \n","3    White      M   9443 Cynthia Court Apt. 038  ...  46.2306 -112.1138   \n","4   Garcia      M              408 Bradley Rest  ...  38.4207  -79.4629   \n","\n","   city_pop                                job         dob  \\\n","0      3495          Psychologist, counselling  1988-03-09   \n","1       149  Special educational needs teacher  1978-06-21   \n","2      4154        Nature conservation officer  1962-01-19   \n","3      1939                    Patent attorney  1967-01-12   \n","4        99     Dance movement psychotherapist  1986-03-28   \n","\n","                          trans_num   unix_time  merch_lat  merch_long  \\\n","0  0b242abb623afc578575680df30655b9  1325376018  36.011293  -82.048315   \n","1  1f76529f8574734946361c461b024d99  1325376044  49.159047 -118.186462   \n","2  a1a22d70485983eac12b5b88dad1cf95  1325376051  43.150704 -112.154481   \n","3  6b849c168bdad6f867558c3793159a81  1325376076  47.034331 -112.561071   \n","4  a41d7549acf90789359a9aa5346dcb46  1325376186  38.674999  -78.632459   \n","\n","   is_fraud  \n","0         0  \n","1         0  \n","2         0  \n","3         0  \n","4         0  \n","\n","[5 rows x 23 columns]"],"text/html":["\n","  <div id=\"df-113a3198-4bf0-4e55-a6fa-dfdae59bcab6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>trans_date_trans_time</th>\n","      <th>cc_num</th>\n","      <th>merchant</th>\n","      <th>category</th>\n","      <th>amt</th>\n","      <th>first</th>\n","      <th>last</th>\n","      <th>gender</th>\n","      <th>street</th>\n","      <th>...</th>\n","      <th>lat</th>\n","      <th>long</th>\n","      <th>city_pop</th>\n","      <th>job</th>\n","      <th>dob</th>\n","      <th>trans_num</th>\n","      <th>unix_time</th>\n","      <th>merch_lat</th>\n","      <th>merch_long</th>\n","      <th>is_fraud</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>2019-01-01 00:00:18</td>\n","      <td>2703186189652095</td>\n","      <td>fraud_Rippin, Kub and Mann</td>\n","      <td>misc_net</td>\n","      <td>4.97</td>\n","      <td>Jennifer</td>\n","      <td>Banks</td>\n","      <td>F</td>\n","      <td>561 Perry Cove</td>\n","      <td>...</td>\n","      <td>36.0788</td>\n","      <td>-81.1781</td>\n","      <td>3495</td>\n","      <td>Psychologist, counselling</td>\n","      <td>1988-03-09</td>\n","      <td>0b242abb623afc578575680df30655b9</td>\n","      <td>1325376018</td>\n","      <td>36.011293</td>\n","      <td>-82.048315</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2019-01-01 00:00:44</td>\n","      <td>630423337322</td>\n","      <td>fraud_Heller, Gutmann and Zieme</td>\n","      <td>grocery_pos</td>\n","      <td>107.23</td>\n","      <td>Stephanie</td>\n","      <td>Gill</td>\n","      <td>F</td>\n","      <td>43039 Riley Greens Suite 393</td>\n","      <td>...</td>\n","      <td>48.8878</td>\n","      <td>-118.2105</td>\n","      <td>149</td>\n","      <td>Special educational needs teacher</td>\n","      <td>1978-06-21</td>\n","      <td>1f76529f8574734946361c461b024d99</td>\n","      <td>1325376044</td>\n","      <td>49.159047</td>\n","      <td>-118.186462</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2019-01-01 00:00:51</td>\n","      <td>38859492057661</td>\n","      <td>fraud_Lind-Buckridge</td>\n","      <td>entertainment</td>\n","      <td>220.11</td>\n","      <td>Edward</td>\n","      <td>Sanchez</td>\n","      <td>M</td>\n","      <td>594 White Dale Suite 530</td>\n","      <td>...</td>\n","      <td>42.1808</td>\n","      <td>-112.2620</td>\n","      <td>4154</td>\n","      <td>Nature conservation officer</td>\n","      <td>1962-01-19</td>\n","      <td>a1a22d70485983eac12b5b88dad1cf95</td>\n","      <td>1325376051</td>\n","      <td>43.150704</td>\n","      <td>-112.154481</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>2019-01-01 00:01:16</td>\n","      <td>3534093764340240</td>\n","      <td>fraud_Kutch, Hermiston and Farrell</td>\n","      <td>gas_transport</td>\n","      <td>45.00</td>\n","      <td>Jeremy</td>\n","      <td>White</td>\n","      <td>M</td>\n","      <td>9443 Cynthia Court Apt. 038</td>\n","      <td>...</td>\n","      <td>46.2306</td>\n","      <td>-112.1138</td>\n","      <td>1939</td>\n","      <td>Patent attorney</td>\n","      <td>1967-01-12</td>\n","      <td>6b849c168bdad6f867558c3793159a81</td>\n","      <td>1325376076</td>\n","      <td>47.034331</td>\n","      <td>-112.561071</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>2019-01-01 00:03:06</td>\n","      <td>375534208663984</td>\n","      <td>fraud_Keeling-Crist</td>\n","      <td>misc_pos</td>\n","      <td>41.96</td>\n","      <td>Tyler</td>\n","      <td>Garcia</td>\n","      <td>M</td>\n","      <td>408 Bradley Rest</td>\n","      <td>...</td>\n","      <td>38.4207</td>\n","      <td>-79.4629</td>\n","      <td>99</td>\n","      <td>Dance movement psychotherapist</td>\n","      <td>1986-03-28</td>\n","      <td>a41d7549acf90789359a9aa5346dcb46</td>\n","      <td>1325376186</td>\n","      <td>38.674999</td>\n","      <td>-78.632459</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 23 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-113a3198-4bf0-4e55-a6fa-dfdae59bcab6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-113a3198-4bf0-4e55-a6fa-dfdae59bcab6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-113a3198-4bf0-4e55-a6fa-dfdae59bcab6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-214173ed-788e-4e1d-84cf-0ae2ca74e9b0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-214173ed-788e-4e1d-84cf-0ae2ca74e9b0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-214173ed-788e-4e1d-84cf-0ae2ca74e9b0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["df.columns"],"metadata":{"execution":{"iopub.status.busy":"2024-01-05T13:25:52.638523Z","iopub.execute_input":"2024-01-05T13:25:52.639438Z","iopub.status.idle":"2024-01-05T13:25:52.647516Z","shell.execute_reply.started":"2024-01-05T13:25:52.639398Z","shell.execute_reply":"2024-01-05T13:25:52.646346Z"},"trusted":true,"id":"cWZ3McatwGI0","executionInfo":{"status":"ok","timestamp":1708537348347,"user_tz":-330,"elapsed":18,"user":{"displayName":"","userId":""}},"outputId":"5a62e169-32e6-4233-a684-72f1f033d547","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Unnamed: 0', 'trans_date_trans_time', 'cc_num', 'merchant', 'category',\n","       'amt', 'first', 'last', 'gender', 'street', 'city', 'state', 'zip',\n","       'lat', 'long', 'city_pop', 'job', 'dob', 'trans_num', 'unix_time',\n","       'merch_lat', 'merch_long', 'is_fraud'],\n","      dtype='object')"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["len(df['cc_num'])"],"metadata":{"execution":{"iopub.status.busy":"2024-01-05T13:26:11.258962Z","iopub.execute_input":"2024-01-05T13:26:11.259473Z","iopub.status.idle":"2024-01-05T13:26:11.268038Z","shell.execute_reply.started":"2024-01-05T13:26:11.259435Z","shell.execute_reply":"2024-01-05T13:26:11.266682Z"},"trusted":true,"id":"Is2PMEZhwGI1","executionInfo":{"status":"ok","timestamp":1708537348347,"user_tz":-330,"elapsed":15,"user":{"displayName":"","userId":""}},"outputId":"66adf7c1-7fa6-4215-f529-208073544a5e","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1296675"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["dff=df[['amt','zip','lat','long','city_pop','unix_time',\n","       'merch_lat', 'merch_long']]\n","df['trans_date_trans_time']=pd.to_datetime(df['trans_date_trans_time'])\n","dff['time']=df['trans_date_trans_time'].dt.minute*60 + df['trans_date_trans_time'].dt.second + df['trans_date_trans_time'].dt.hour*60*60\n","dff['tran_mon']=df['trans_date_trans_time'].dt.month\n","dff['trans_day']=df['trans_date_trans_time'].dt.day\n","dff['trans_year']=df['trans_date_trans_time'].dt.year\n","dff['fraud_det']=df['is_fraud']\n","dff.head(10)"],"metadata":{"execution":{"iopub.status.busy":"2024-01-05T13:26:20.888591Z","iopub.execute_input":"2024-01-05T13:26:20.889061Z","iopub.status.idle":"2024-01-05T13:26:22.245686Z","shell.execute_reply.started":"2024-01-05T13:26:20.889029Z","shell.execute_reply":"2024-01-05T13:26:22.244666Z"},"trusted":true,"id":"zSMyEt8HwGI1","executionInfo":{"status":"ok","timestamp":1708537350081,"user_tz":-330,"elapsed":1747,"user":{"displayName":"","userId":""}},"outputId":"0e755b84-1935-48dc-9c90-8ae5d64434c3","colab":{"base_uri":"https://localhost:8080/","height":883}},"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-7-a7158818efb0>:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dff['time']=df['trans_date_trans_time'].dt.minute*60 + df['trans_date_trans_time'].dt.second + df['trans_date_trans_time'].dt.hour*60*60\n","<ipython-input-7-a7158818efb0>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dff['tran_mon']=df['trans_date_trans_time'].dt.month\n","<ipython-input-7-a7158818efb0>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dff['trans_day']=df['trans_date_trans_time'].dt.day\n","<ipython-input-7-a7158818efb0>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dff['trans_year']=df['trans_date_trans_time'].dt.year\n","<ipython-input-7-a7158818efb0>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dff['fraud_det']=df['is_fraud']\n"]},{"output_type":"execute_result","data":{"text/plain":["      amt    zip      lat      long  city_pop   unix_time  merch_lat  \\\n","0    4.97  28654  36.0788  -81.1781      3495  1325376018  36.011293   \n","1  107.23  99160  48.8878 -118.2105       149  1325376044  49.159047   \n","2  220.11  83252  42.1808 -112.2620      4154  1325376051  43.150704   \n","3   45.00  59632  46.2306 -112.1138      1939  1325376076  47.034331   \n","4   41.96  24433  38.4207  -79.4629        99  1325376186  38.674999   \n","5   94.63  18917  40.3750  -75.2045      2158  1325376248  40.653382   \n","6   44.54  67851  37.9931 -100.9893      2691  1325376282  37.162705   \n","7   71.65  22824  38.8432  -78.6003      6018  1325376308  38.948089   \n","8    4.27  15665  40.3359  -79.6607      1472  1325376318  40.351813   \n","9  198.39  37040  36.5220  -87.3490    151785  1325376361  37.179198   \n","\n","   merch_long  time  tran_mon  trans_day  trans_year  fraud_det  \n","0  -82.048315    18         1          1        2019          0  \n","1 -118.186462    44         1          1        2019          0  \n","2 -112.154481    51         1          1        2019          0  \n","3 -112.561071    76         1          1        2019          0  \n","4  -78.632459   186         1          1        2019          0  \n","5  -76.152667   248         1          1        2019          0  \n","6 -100.153370   282         1          1        2019          0  \n","7  -78.540296   308         1          1        2019          0  \n","8  -79.958146   318         1          1        2019          0  \n","9  -87.485381   361         1          1        2019          0  "],"text/html":["\n","  <div id=\"df-8a6c42fb-e2b2-4f02-ab30-10133324dbef\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>amt</th>\n","      <th>zip</th>\n","      <th>lat</th>\n","      <th>long</th>\n","      <th>city_pop</th>\n","      <th>unix_time</th>\n","      <th>merch_lat</th>\n","      <th>merch_long</th>\n","      <th>time</th>\n","      <th>tran_mon</th>\n","      <th>trans_day</th>\n","      <th>trans_year</th>\n","      <th>fraud_det</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4.97</td>\n","      <td>28654</td>\n","      <td>36.0788</td>\n","      <td>-81.1781</td>\n","      <td>3495</td>\n","      <td>1325376018</td>\n","      <td>36.011293</td>\n","      <td>-82.048315</td>\n","      <td>18</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2019</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>107.23</td>\n","      <td>99160</td>\n","      <td>48.8878</td>\n","      <td>-118.2105</td>\n","      <td>149</td>\n","      <td>1325376044</td>\n","      <td>49.159047</td>\n","      <td>-118.186462</td>\n","      <td>44</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2019</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>220.11</td>\n","      <td>83252</td>\n","      <td>42.1808</td>\n","      <td>-112.2620</td>\n","      <td>4154</td>\n","      <td>1325376051</td>\n","      <td>43.150704</td>\n","      <td>-112.154481</td>\n","      <td>51</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2019</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>45.00</td>\n","      <td>59632</td>\n","      <td>46.2306</td>\n","      <td>-112.1138</td>\n","      <td>1939</td>\n","      <td>1325376076</td>\n","      <td>47.034331</td>\n","      <td>-112.561071</td>\n","      <td>76</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2019</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>41.96</td>\n","      <td>24433</td>\n","      <td>38.4207</td>\n","      <td>-79.4629</td>\n","      <td>99</td>\n","      <td>1325376186</td>\n","      <td>38.674999</td>\n","      <td>-78.632459</td>\n","      <td>186</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2019</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>94.63</td>\n","      <td>18917</td>\n","      <td>40.3750</td>\n","      <td>-75.2045</td>\n","      <td>2158</td>\n","      <td>1325376248</td>\n","      <td>40.653382</td>\n","      <td>-76.152667</td>\n","      <td>248</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2019</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>44.54</td>\n","      <td>67851</td>\n","      <td>37.9931</td>\n","      <td>-100.9893</td>\n","      <td>2691</td>\n","      <td>1325376282</td>\n","      <td>37.162705</td>\n","      <td>-100.153370</td>\n","      <td>282</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2019</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>71.65</td>\n","      <td>22824</td>\n","      <td>38.8432</td>\n","      <td>-78.6003</td>\n","      <td>6018</td>\n","      <td>1325376308</td>\n","      <td>38.948089</td>\n","      <td>-78.540296</td>\n","      <td>308</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2019</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>4.27</td>\n","      <td>15665</td>\n","      <td>40.3359</td>\n","      <td>-79.6607</td>\n","      <td>1472</td>\n","      <td>1325376318</td>\n","      <td>40.351813</td>\n","      <td>-79.958146</td>\n","      <td>318</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2019</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>198.39</td>\n","      <td>37040</td>\n","      <td>36.5220</td>\n","      <td>-87.3490</td>\n","      <td>151785</td>\n","      <td>1325376361</td>\n","      <td>37.179198</td>\n","      <td>-87.485381</td>\n","      <td>361</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2019</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a6c42fb-e2b2-4f02-ab30-10133324dbef')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8a6c42fb-e2b2-4f02-ab30-10133324dbef button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8a6c42fb-e2b2-4f02-ab30-10133324dbef');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-807ca955-4c92-40ce-baf9-d9e8b426303f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-807ca955-4c92-40ce-baf9-d9e8b426303f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-807ca955-4c92-40ce-baf9-d9e8b426303f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dff"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["X=dff[[i for i in dff.columns if i!='fraud_det']]\n","Y=dff['fraud_det']"],"metadata":{"execution":{"iopub.status.busy":"2024-01-05T13:26:30.728699Z","iopub.execute_input":"2024-01-05T13:26:30.729162Z","iopub.status.idle":"2024-01-05T13:26:30.803032Z","shell.execute_reply.started":"2024-01-05T13:26:30.729123Z","shell.execute_reply":"2024-01-05T13:26:30.801574Z"},"trusted":true,"id":"mBnSwCMjwGI2","executionInfo":{"status":"ok","timestamp":1708537350081,"user_tz":-330,"elapsed":12,"user":{"displayName":"","userId":""}}},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":["## Use Logistic Regression to train the data"],"metadata":{"id":"o9CUDRdewGI2"}},{"cell_type":"code","source":["x_tr,x_te,y_tr,y_te=train_test_split(X,Y,test_size=.3)\n","model=LogisticRegression()\n","model.fit(x_tr,y_tr)"],"metadata":{"execution":{"iopub.status.busy":"2024-01-05T13:27:06.733133Z","iopub.execute_input":"2024-01-05T13:27:06.733551Z","iopub.status.idle":"2024-01-05T13:27:10.161284Z","shell.execute_reply.started":"2024-01-05T13:27:06.733522Z","shell.execute_reply":"2024-01-05T13:27:10.159821Z"},"trusted":true,"id":"RN56XlSAwGI3","executionInfo":{"status":"ok","timestamp":1708537370499,"user_tz":-330,"elapsed":2391,"user":{"displayName":"","userId":""}},"outputId":"8fe5bc36-2b3e-4cdc-b8ca-97fb73dd327a","colab":{"base_uri":"https://localhost:8080/","height":74}},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression()"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["def heat_map(cm):\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)\n","    plt.xlabel('Predicted Labels')\n","    plt.ylabel('True Labels')\n","    plt.title('Confusion Matrix')\n","    plt.show()"],"metadata":{"execution":{"iopub.status.busy":"2024-01-05T13:48:57.602956Z","iopub.execute_input":"2024-01-05T13:48:57.603421Z","iopub.status.idle":"2024-01-05T13:48:57.611477Z","shell.execute_reply.started":"2024-01-05T13:48:57.603386Z","shell.execute_reply":"2024-01-05T13:48:57.609804Z"},"trusted":true,"id":"dQm_MsuvwGI3","executionInfo":{"status":"ok","timestamp":1708537370500,"user_tz":-330,"elapsed":5,"user":{"displayName":"","userId":""}}},"execution_count":14,"outputs":[]},{"cell_type":"markdown","source":["## Finding Accuracy and Confusion Matrix and Ploting the data in confusion matrix"],"metadata":{"id":"5b1ZZxCewGI3"}},{"cell_type":"code","source":["y_pre=model.predict(x_te)\n","print(\"Accuracy Score is \",accuracy_score(y_te,y_pre))\n","print(confusion_matrix(y_te,y_pre))\n","heat_map(confusion_matrix(y_te,y_pre))"],"metadata":{"execution":{"iopub.status.busy":"2024-01-05T13:50:40.478476Z","iopub.execute_input":"2024-01-05T13:50:40.478922Z","iopub.status.idle":"2024-01-05T13:50:40.908178Z","shell.execute_reply.started":"2024-01-05T13:50:40.478888Z","shell.execute_reply":"2024-01-05T13:50:40.906931Z"},"trusted":true,"id":"RS5afRTOwGI3","executionInfo":{"status":"ok","timestamp":1708537377097,"user_tz":-330,"elapsed":883,"user":{"displayName":"","userId":""}},"outputId":"aece7ca1-c488-4935-b12e-dbbbeaa3be32","colab":{"base_uri":"https://localhost:8080/","height":524}},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy Score is  0.9961371434055519\n","[[166072      0]\n"," [   644      0]]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## Feature Selection for the test data"],"metadata":{"id":"K6mMSyf_wGI4"}},{"cell_type":"code","source":["test_frame=pd.read_csv('/kaggle/input/fraud-detection/fraudTest.csv')\n","test_frame['trans_date_trans_time']=pd.to_datetime(test_frame['trans_date_trans_time'])\n","X=test_frame[['amt','zip','lat','long','city_pop','unix_time',\n","       'merch_lat', 'merch_long']]\n","X['time']=test_frame['trans_date_trans_time'].dt.minute*60 + test_frame['trans_date_trans_time'].dt.second + test_frame['trans_date_trans_time'].dt.hour*60*60\n","X['tran_mon']=test_frame['trans_date_trans_time'].dt.month\n","X['trans_day']=test_frame['trans_date_trans_time'].dt.day\n","X['trans_year']=test_frame['trans_date_trans_time'].dt.year\n","Y=test_frame['is_fraud']"],"metadata":{"execution":{"iopub.status.busy":"2024-01-05T13:39:49.034048Z","iopub.execute_input":"2024-01-05T13:39:49.034535Z","iopub.status.idle":"2024-01-05T13:39:53.881806Z","shell.execute_reply.started":"2024-01-05T13:39:49.0345Z","shell.execute_reply":"2024-01-05T13:39:53.880309Z"},"trusted":true,"id":"jMV1PbVZwGI4","executionInfo":{"status":"ok","timestamp":1708537363024,"user_tz":-330,"elapsed":5152,"user":{"displayName":"","userId":""}},"outputId":"8b376abb-4147-4d57-d9a3-565cebe4c847","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":10,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-10-9548d3e4f77f>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  X['time']=test_frame['trans_date_trans_time'].dt.minute*60 + test_frame['trans_date_trans_time'].dt.second + test_frame['trans_date_trans_time'].dt.hour*60*60\n","<ipython-input-10-9548d3e4f77f>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  X['tran_mon']=test_frame['trans_date_trans_time'].dt.month\n","<ipython-input-10-9548d3e4f77f>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  X['trans_day']=test_frame['trans_date_trans_time'].dt.day\n","<ipython-input-10-9548d3e4f77f>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  X['trans_year']=test_frame['trans_date_trans_time'].dt.year\n"]}]},{"cell_type":"markdown","source":["## Showing Accuracy on the prediction on the test data and confusion matrix"],"metadata":{"id":"wMkGF1R7wGI4"}},{"cell_type":"code","source":["Y_pre=model.predict(X)\n","print('Accuracy_Score : ',accuracy_score(Y,Y_pre))\n","print('confusion_Matrix : ',confusion_matrix(Y,Y_pre))\n","heat_map(confusion_matrix(Y,Y_pre))"],"metadata":{"execution":{"iopub.status.busy":"2024-01-05T13:51:13.803692Z","iopub.execute_input":"2024-01-05T13:51:13.804154Z","iopub.status.idle":"2024-01-05T13:51:14.319494Z","shell.execute_reply.started":"2024-01-05T13:51:13.804118Z","shell.execute_reply":"2024-01-05T13:51:14.317921Z"},"trusted":true,"id":"Wc3N9op6wGI4","executionInfo":{"status":"ok","timestamp":1708537380831,"user_tz":-330,"elapsed":12,"user":{"displayName":"","userId":""}},"outputId":"3ce94a79-fd42-4094-adf1-c296d07b2818","colab":{"base_uri":"https://localhost:8080/","height":524}},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy_Score :  0.9961401355721147\n","confusion_Matrix :  [[553574      0]\n"," [  2145      0]]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}
